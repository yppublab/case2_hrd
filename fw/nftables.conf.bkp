flush ruleset

# Actual interface mapping (as per docker-compose order, inspected in fw):
#   eth0 = users_net   (192.168.1.0/24)
#   eth1 = dmz_net     (192.168.2.0/24)
#   eth2 = servers_net (192.168.0.0/24)
#   eth3 = nat_net  (192.168.99.0/24)

table inet fw {
  set internal_nets {
    type ipv4_addr;
    flags interval;
    elements = { 192.168.1.0/24, 192.168.2.0/24, 192.168.0.0/24 }
  }
  chain input {
    type filter hook input priority 0;
    ct state established,related accept
    meta l4proto { icmp, icmpv6 } counter accept
    iifname "lo" accept
    tcp dport 22 accept
    ip saddr { 192.168.1.0/24, 192.168.2.0/24, 192.168.0.0/24 } accept
    counter accept
  }

  chain forward {
    type filter hook forward priority 0;
    ct state established,related accept
    ct status dnat accept
    meta l4proto { icmp, icmpv6 } counter accept

    # Allow external/users to reach WAF in DMZ (now listening on 80)
    ip daddr 192.168.2.20 tcp dport 80 counter accept

    # Allow external MTAs to reach mail server on 25 (servers_net)
    ip daddr 192.168.0.20 tcp dport 25 counter accept

    # Allow XRDP to Anna (RDP default 3389)
    ip daddr 192.168.1.3 tcp dport 3389 counter accept

    # Allow users_net to reach web-server directly (intra-lab access)
    ip saddr 192.168.1.0/24 ip daddr 192.168.0.10 tcp dport 80 counter accept

    # internal <-> internal: permit
    ip saddr @internal_nets ip daddr @internal_nets counter accept

    # internal -> external (egress): permit
    ip saddr @internal_nets ip daddr != @internal_nets counter accept

    # drop unsolicited external -> internal
    ip saddr != @internal_nets ip daddr @internal_nets counter drop
  }

  chain output {
    type filter hook output priority 0;
    ct state established,related accept
    meta l4proto { icmp, icmpv6 } counter accept
    counter accept
  }
}

## NAT for host-published ports and uplink egress

table ip nat {
  
  chain PREROUTING {
    type nat hook prerouting priority -100;
    # Match by destination of any fw interface address (covers Docker's choice of target iface)
    iif "eth_nat" tcp dport 80 counter dnat to 192.168.2.20:80    # ingress -> WAF
    iif "eth_nat" tcp dport 25   counter dnat to 192.168.0.20:25   # ingress -> MTA
    iif "eth_nat" tcp dport 8443 counter dnat to 192.168.0.20:443 # ingress -> mail admin
    iif "eth_nat" tcp dport 6666 counter dnat to 192.168.1.3:3389  # ingress -> XRDP Anna    
    iif "eth_nat" tcp dport 143 counter dnat to 192.168.0.20:143 # ingress -> IMAP
  }

  chain POSTROUTING {
    type nat hook postrouting priority 100;
    # Ensure return path back via firewall for DNATed flows
    ip daddr 192.168.2.20 tcp dport 80 counter snat to 192.168.2.254    # WAF -> egress
    ip daddr 192.168.0.20 tcp dport 25 counter snat to 192.168.0.254    # SMTP -> egress
    ip daddr 192.168.0.20 tcp dport 143 counter snat to 192.168.0.254   # IMAP -> egress
    ip daddr 192.168.1.3 tcp dport 3389 counter snat to 192.168.1.254   # RDP -> egress
    oifname "eth_nat" masquerade  # Generic egress to nat
  }
}
