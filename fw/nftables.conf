flush ruleset

table inet fw {
  set internal_nets {
    type ipv4_addr;
    flags interval;
    elements = { 172.31.1.0/24, 172.31.2.0/24, 172.31.4.0/24 }
  }
  chain input {
    type filter hook input priority 0;
    ct state established,related accept
    meta l4proto { icmp, icmpv6 } counter accept
    iifname "lo" accept
    counter accept
  }

  chain forward {
    type filter hook forward priority 0;
    ct state established,related accept
    ct status dnat accept
    meta l4proto { icmp, icmpv6 } counter accept

    # internal <-> internal: permit
    ip saddr @internal_nets ip daddr @internal_nets counter accept

    # internal -> external (egress): permit
    ip saddr @internal_nets ip daddr != @internal_nets counter accept
  }

  chain output {
    type filter hook output priority 0;
    ct state established,related accept
    meta l4proto { icmp, icmpv6 } counter accept
    counter accept
  }
}

## NAT for host-published ports and uplink egress

table ip nat {
  
  chain PREROUTING {
    type nat hook prerouting priority -100;
    # Match by destination of any fw interface address (covers Docker's choice of target iface)
    #iif "eth_nat" tcp dport 80 counter dnat to 192.168.2.20:80    # ingress -> WAF
  }

  chain POSTROUTING {
    type nat hook postrouting priority 100;
    # Ensure return path back via firewall for DNATed flows
    oifname "eth_dmz" masquerade  # Generic SNAT to dmz
  }
}
